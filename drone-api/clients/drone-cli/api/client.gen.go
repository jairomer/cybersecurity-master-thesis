// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for UserProvisionRole.
const (
	Drone   UserProvisionRole = "drone"
	Officer UserProvisionRole = "officer"
	Pilot   UserProvisionRole = "pilot"
)

// BattlefieldData defines model for BattlefieldData.
type BattlefieldData struct {
	Drones []DroneData `json:"drones"`
}

// BattlefieldProvision defines model for BattlefieldProvision.
type BattlefieldProvision struct {
	Credentials []UserProvision     `json:"credentials"`
	Pilots      []PilotProvisioning `json:"pilots"`
}

// Coordinate defines model for Coordinate.
type Coordinate struct {
	Altitude  float64 `json:"altitude"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// DroneData defines model for DroneData.
type DroneData struct {
	Id       string     `json:"id"`
	Location Coordinate `json:"location"`
	Target   Coordinate `json:"target"`
}

// LoginSuccess defines model for LoginSuccess.
type LoginSuccess struct {
	// Token JWT Access Token
	Token string `json:"token"`
}

// PilotProvisioning defines model for PilotProvisioning.
type PilotProvisioning struct {
	Drones []DroneData `json:"drones"`
	Id     string      `json:"id"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Password string `json:"password"`
	User     string `json:"user"`
}

// UserProvision defines model for UserProvision.
type UserProvision struct {
	Password string            `json:"password"`
	Role     UserProvisionRole `json:"role"`
	User     string            `json:"user"`
}

// UserProvisionRole defines model for UserProvision.Role.
type UserProvisionRole string

// SetTargetLocationJSONRequestBody defines body for SetTargetLocation for application/json ContentType.
type SetTargetLocationJSONRequestBody = Coordinate

// BattlefieldProvisionJSONRequestBody defines body for BattlefieldProvision for application/json ContentType.
type BattlefieldProvisionJSONRequestBody = BattlefieldProvision

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = UserLogin

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBattlefieldData request
	GetBattlefieldData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTargetLocationWithBody request with any body
	SetTargetLocationWithBody(ctx context.Context, droneid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetTargetLocation(ctx context.Context, droneid string, body SetTargetLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BattlefieldProvisionWithBody request with any body
	BattlefieldProvisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BattlefieldProvision(ctx context.Context, body BattlefieldProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBattlefieldData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBattlefieldDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTargetLocationWithBody(ctx context.Context, droneid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTargetLocationRequestWithBody(c.Server, droneid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTargetLocation(ctx context.Context, droneid string, body SetTargetLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTargetLocationRequest(c.Server, droneid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BattlefieldProvisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBattlefieldProvisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BattlefieldProvision(ctx context.Context, body BattlefieldProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBattlefieldProvisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBattlefieldDataRequest generates requests for GetBattlefieldData
func NewGetBattlefieldDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/battlefield")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetTargetLocationRequest calls the generic SetTargetLocation builder with application/json body
func NewSetTargetLocationRequest(server string, droneid string, body SetTargetLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetTargetLocationRequestWithBody(server, droneid, "application/json", bodyReader)
}

// NewSetTargetLocationRequestWithBody generates requests for SetTargetLocation with any type of body
func NewSetTargetLocationRequestWithBody(server string, droneid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "droneid", runtime.ParamLocationPath, droneid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/battlefield/drone/%s/target", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBattlefieldProvisionRequest calls the generic BattlefieldProvision builder with application/json body
func NewBattlefieldProvisionRequest(server string, body BattlefieldProvisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBattlefieldProvisionRequestWithBody(server, "application/json", bodyReader)
}

// NewBattlefieldProvisionRequestWithBody generates requests for BattlefieldProvision with any type of body
func NewBattlefieldProvisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/battlefield/provision")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBattlefieldDataWithResponse request
	GetBattlefieldDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBattlefieldDataResponse, error)

	// SetTargetLocationWithBodyWithResponse request with any body
	SetTargetLocationWithBodyWithResponse(ctx context.Context, droneid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTargetLocationResponse, error)

	SetTargetLocationWithResponse(ctx context.Context, droneid string, body SetTargetLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTargetLocationResponse, error)

	// BattlefieldProvisionWithBodyWithResponse request with any body
	BattlefieldProvisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BattlefieldProvisionResponse, error)

	BattlefieldProvisionWithResponse(ctx context.Context, body BattlefieldProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*BattlefieldProvisionResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)
}

type GetBattlefieldDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BattlefieldData
}

// Status returns HTTPResponse.Status
func (r GetBattlefieldDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBattlefieldDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTargetLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DroneData
}

// Status returns HTTPResponse.Status
func (r SetTargetLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTargetLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BattlefieldProvisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BattlefieldData
}

// Status returns HTTPResponse.Status
func (r BattlefieldProvisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BattlefieldProvisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginSuccess
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBattlefieldDataWithResponse request returning *GetBattlefieldDataResponse
func (c *ClientWithResponses) GetBattlefieldDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBattlefieldDataResponse, error) {
	rsp, err := c.GetBattlefieldData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBattlefieldDataResponse(rsp)
}

// SetTargetLocationWithBodyWithResponse request with arbitrary body returning *SetTargetLocationResponse
func (c *ClientWithResponses) SetTargetLocationWithBodyWithResponse(ctx context.Context, droneid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTargetLocationResponse, error) {
	rsp, err := c.SetTargetLocationWithBody(ctx, droneid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTargetLocationResponse(rsp)
}

func (c *ClientWithResponses) SetTargetLocationWithResponse(ctx context.Context, droneid string, body SetTargetLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTargetLocationResponse, error) {
	rsp, err := c.SetTargetLocation(ctx, droneid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTargetLocationResponse(rsp)
}

// BattlefieldProvisionWithBodyWithResponse request with arbitrary body returning *BattlefieldProvisionResponse
func (c *ClientWithResponses) BattlefieldProvisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BattlefieldProvisionResponse, error) {
	rsp, err := c.BattlefieldProvisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBattlefieldProvisionResponse(rsp)
}

func (c *ClientWithResponses) BattlefieldProvisionWithResponse(ctx context.Context, body BattlefieldProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*BattlefieldProvisionResponse, error) {
	rsp, err := c.BattlefieldProvision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBattlefieldProvisionResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// ParseGetBattlefieldDataResponse parses an HTTP response from a GetBattlefieldDataWithResponse call
func ParseGetBattlefieldDataResponse(rsp *http.Response) (*GetBattlefieldDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBattlefieldDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BattlefieldData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetTargetLocationResponse parses an HTTP response from a SetTargetLocationWithResponse call
func ParseSetTargetLocationResponse(rsp *http.Response) (*SetTargetLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTargetLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DroneData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBattlefieldProvisionResponse parses an HTTP response from a BattlefieldProvisionWithResponse call
func ParseBattlefieldProvisionResponse(rsp *http.Response) (*BattlefieldProvisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BattlefieldProvisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BattlefieldData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
