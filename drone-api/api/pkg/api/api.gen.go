// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for UserProvisionRole.
const (
	Drone   UserProvisionRole = "drone"
	Officer UserProvisionRole = "officer"
	Pilot   UserProvisionRole = "pilot"
)

// BattlefieldData defines model for BattlefieldData.
type BattlefieldData struct {
	Drones []DroneData `json:"drones"`
}

// BattlefieldProvision defines model for BattlefieldProvision.
type BattlefieldProvision struct {
	Credentials []UserProvision     `json:"credentials"`
	Pilots      []PilotProvisioning `json:"pilots"`
}

// Coordinate defines model for Coordinate.
type Coordinate struct {
	Altitude  float64 `json:"altitude"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// DroneData defines model for DroneData.
type DroneData struct {
	Id       string     `json:"id"`
	Location Coordinate `json:"location"`
	Target   Coordinate `json:"target"`
}

// LoginSuccess defines model for LoginSuccess.
type LoginSuccess struct {
	// Token JWT Access Token
	Token string `json:"token"`
}

// PilotProvisioning defines model for PilotProvisioning.
type PilotProvisioning struct {
	Drones []DroneData `json:"drones"`
	Id     string      `json:"id"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Password string `json:"password"`
	User     string `json:"user"`
}

// UserProvision defines model for UserProvision.
type UserProvision struct {
	Password string            `json:"password"`
	Role     UserProvisionRole `json:"role"`
	User     string            `json:"user"`
}

// UserProvisionRole defines model for UserProvision.Role.
type UserProvisionRole string

// SetTargetLocationJSONRequestBody defines body for SetTargetLocation for application/json ContentType.
type SetTargetLocationJSONRequestBody = Coordinate

// BattlefieldProvisionJSONRequestBody defines body for BattlefieldProvision for application/json ContentType.
type BattlefieldProvisionJSONRequestBody = BattlefieldProvision

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = UserLogin

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Receive battlefield data according to caller's identity.
	// (GET /battlefield)
	GetBattlefieldData(ctx echo.Context) error
	// A pilot will set a new target location to a drone under its command.
	// (POST /battlefield/drone/{droneid}/target)
	SetTargetLocation(ctx echo.Context, droneid string) error
	// An officer will use this endpoint to provision resources for a battlefield.
	// (POST /battlefield/provision)
	BattlefieldProvision(ctx echo.Context) error
	// Present user credentials for authentication receive a JWT for per-request authn.
	// (POST /login)
	Login(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBattlefieldData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBattlefieldData(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBattlefieldData(ctx)
	return err
}

// SetTargetLocation converts echo context to params.
func (w *ServerInterfaceWrapper) SetTargetLocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "droneid" -------------
	var droneid string

	err = runtime.BindStyledParameterWithOptions("simple", "droneid", ctx.Param("droneid"), &droneid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter droneid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetTargetLocation(ctx, droneid)
	return err
}

// BattlefieldProvision converts echo context to params.
func (w *ServerInterfaceWrapper) BattlefieldProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BattlefieldProvision(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/battlefield", wrapper.GetBattlefieldData)
	router.POST(baseURL+"/battlefield/drone/:droneid/target", wrapper.SetTargetLocation)
	router.POST(baseURL+"/battlefield/provision", wrapper.BattlefieldProvision)
	router.POST(baseURL+"/login", wrapper.Login)

}

type GetBattlefieldDataRequestObject struct {
}

type GetBattlefieldDataResponseObject interface {
	VisitGetBattlefieldDataResponse(w http.ResponseWriter) error
}

type GetBattlefieldData200JSONResponse BattlefieldData

func (response GetBattlefieldData200JSONResponse) VisitGetBattlefieldDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBattlefieldData403Response struct {
}

func (response GetBattlefieldData403Response) VisitGetBattlefieldDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type SetTargetLocationRequestObject struct {
	Droneid string `json:"droneid"`
	Body    *SetTargetLocationJSONRequestBody
}

type SetTargetLocationResponseObject interface {
	VisitSetTargetLocationResponse(w http.ResponseWriter) error
}

type SetTargetLocation200JSONResponse DroneData

func (response SetTargetLocation200JSONResponse) VisitSetTargetLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetTargetLocation403Response struct {
}

func (response SetTargetLocation403Response) VisitSetTargetLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type BattlefieldProvisionRequestObject struct {
	Body *BattlefieldProvisionJSONRequestBody
}

type BattlefieldProvisionResponseObject interface {
	VisitBattlefieldProvisionResponse(w http.ResponseWriter) error
}

type BattlefieldProvision200JSONResponse BattlefieldData

func (response BattlefieldProvision200JSONResponse) VisitBattlefieldProvisionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BattlefieldProvision400Response struct {
}

func (response BattlefieldProvision400Response) VisitBattlefieldProvisionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type BattlefieldProvision403Response struct {
}

func (response BattlefieldProvision403Response) VisitBattlefieldProvisionResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse LoginSuccess

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login401Response struct {
}

func (response Login401Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Receive battlefield data according to caller's identity.
	// (GET /battlefield)
	GetBattlefieldData(ctx context.Context, request GetBattlefieldDataRequestObject) (GetBattlefieldDataResponseObject, error)
	// A pilot will set a new target location to a drone under its command.
	// (POST /battlefield/drone/{droneid}/target)
	SetTargetLocation(ctx context.Context, request SetTargetLocationRequestObject) (SetTargetLocationResponseObject, error)
	// An officer will use this endpoint to provision resources for a battlefield.
	// (POST /battlefield/provision)
	BattlefieldProvision(ctx context.Context, request BattlefieldProvisionRequestObject) (BattlefieldProvisionResponseObject, error)
	// Present user credentials for authentication receive a JWT for per-request authn.
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetBattlefieldData operation middleware
func (sh *strictHandler) GetBattlefieldData(ctx echo.Context) error {
	var request GetBattlefieldDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBattlefieldData(ctx.Request().Context(), request.(GetBattlefieldDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBattlefieldData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBattlefieldDataResponseObject); ok {
		return validResponse.VisitGetBattlefieldDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SetTargetLocation operation middleware
func (sh *strictHandler) SetTargetLocation(ctx echo.Context, droneid string) error {
	var request SetTargetLocationRequestObject

	request.Droneid = droneid

	var body SetTargetLocationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetTargetLocation(ctx.Request().Context(), request.(SetTargetLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetTargetLocation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetTargetLocationResponseObject); ok {
		return validResponse.VisitSetTargetLocationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// BattlefieldProvision operation middleware
func (sh *strictHandler) BattlefieldProvision(ctx echo.Context) error {
	var request BattlefieldProvisionRequestObject

	var body BattlefieldProvisionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BattlefieldProvision(ctx.Request().Context(), request.(BattlefieldProvisionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BattlefieldProvision")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(BattlefieldProvisionResponseObject); ok {
		return validResponse.VisitBattlefieldProvisionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
